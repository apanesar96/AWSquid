# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# defaults:
#   run:
#     working-directory: ./backendwebsiteservice

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Gradle
#        working-directory: ./backendwebsiteservice
        run: gradle build

      - name: Test with Gradle
#        working-directory: ./backendwebsiteservice
        run: SPRING_PROFILES_ACTIVE=staging gradle test

      - name: Docker Build and Push Image
#          working-directory: ./backendwebsiteservice
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: apcodurance/awsquid
          tags: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  deploy:
    needs:
      - build
    defaults:
      run:
        working-directory: ./infra
    env:
      TF_VAR_aws_region: ${{ secrets.TF_VAR_aws_region }}
      TF_VAR_playground_account_id: ${{ secrets.TF_VAR_playground_account_id }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Cache Terraform
        uses: actions/cache@v2
        with:
          path: ./infra/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: ${{ runner.os }}-terraform-

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        run: terraform plan -out plan.tfplan -no-color -input=false -replace="aws_instance.walking_skeleton"
        continue-on-error: false

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false plan.tfplan
        continue-on-error: false
